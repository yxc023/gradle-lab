import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Status


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.2'
    }
}




task(release) {
    doLast {

        def versionPattern = ~/\d+\.\d+\.\d+(-SNAPSHOT)?/

//        println "1.0.0".matches(versionPattern)
//        println "1.22.0-SNAPSHOT".matches(versionPattern)

        def grgit = Grgit.open()
        Status status = grgit.status()
        if (!status.clean) {
            println 'git status is not clean!'
            return
        }


//        println "version '1.0.0-SNAPSHOT'".matches(~/ *version *=? *["|'].+-SNAPSHOT["|']/)

        def currentBranch = grgit.branch.current.name
        if (currentBranch == 'master') {
            def rootBuildFile = file("$rootDir/build.gradle")
            def rootBuildFileBak = file("$rootDir/build.gradle.bak")
            copy {
                from(rootBuildFile)
                into(rootDir)
                rename("build.gradle", "build.gradle.bak")
            }
            rootBuildFile.delete()
            def version = ''
            copy {
                from(rootBuildFileBak)
                into(rootDir)
                rename("build.gradle.bak", "build.gradle")

                boolean findVersionAndProcessed
                filter { String line ->
                    if (line.matches(~/ *version *=? *["|'].+["|']/)) {

                        version = line.find(versionPattern)
//                        println version

                        if(line.matches(~/ *version *=? *["|'].+-SNAPSHOT["|']/) ){
                            return line[0..-11] + (line.indexOf("'") < 0 ? "\"" : "'")

                        }
                    }
                    return line
                }
            }
            rootBuildFileBak.delete()

            grgit.add(patterns:['build.gradle'])
            grgit.commit(message: "Release version ${version}.RELEASE")
            grgit.tag.add(name: "v${version}.RELEASE", message: "Release version ${version}.RELEASE")

            println "version ${version} release ok, run these cmd to publish release:"
            println "git push origin master"
            println "git push origin v${version}.RELEASE"

        }

    }
}