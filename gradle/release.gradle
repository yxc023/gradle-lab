import com.vdurmont.semver4j.Semver
import org.ajoberstar.grgit.Grgit
import org.ajoberstar.grgit.Status
import org.ajoberstar.grgit.Tag

import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.2'
        classpath 'com.vdurmont:semver4j:2.0.3'
    }
}


class ReleaseTask extends DefaultTask {


    String releaseBranch
    Pattern versionPattern = ~/\d+\.\d+\.\d+[\.\+0-9A-Za-z]*/

    File rootBuildFile = project.file("$project.rootDir/build.gradle")
    File rootBuildFileTmp = project.file("$project.buildDir/release/build.gradle.release")

    ReleaseTask() {
        group = "release"
        description = "release this project"
    }

    @TaskAction
    def release() {
        def grgit = Grgit.open()

        def currentBranch = grgit.branch.current.name
        if (currentBranch != this.releaseBranch) {
            println "release should be at ${this.releaseBranch}"
            return
        }

        Status status = grgit.status()
        if (!status.clean) {
            println 'git status is not clean!'
//            return
        }


        def version = null
        def findVersion = false;
        project.copy {
            from(this.rootBuildFile)
            into(this.rootBuildFileTmp.getParent())
            rename(this.rootBuildFile.name, this.rootBuildFileTmp.name)

            filter { String line ->
                if (line.matches(~/ *version *=? *["|'].+["|']/)) {
                    findVersion = true
                    version = line.find(versionPattern)
                    try {
                        Semver semver = new Semver(version)
                    } catch (Exception e) {

                    }
                    if (version != null) {
                        println "current version: $version"
                        version = version.replace("-SNAPSHOT", "")
                        line = line.replace("-SNAPSHOT", "")
                        println "new version: $version"
                        return line
                    } else {
                        println "version not match $versionPattern"
                        return line
                    }
                }
                return line
            }
        }
        if (version == null) {
            if (!findVersion) {
                println "not find a version"
            }
            return
        }



        def tagVersion = "v${version}.RELEASE"
        List<Tag> tags = grgit.tag.list()
        Tag existTag = tags.find() { tag ->
            tag.getName().equals(tagVersion)
        }
        if (existTag != null) {
            pringln "tag $tagVersion has exists!"
        }

        grgit.add(patterns: ['build.gradle'])
        grgit.commit(message: "Release version ${version}.RELEASE")
        grgit.tag.add(name: tagVersion, message: "Release version ${version}.RELEASE")

        project.copy {
            from(this.rootBuildFileTmp)
            into(project.rootDir)
            rename(this.rootBuildFileTmp.name, this.rootBuildFile.name)
        }

        println "version ${version} release ok, run these cmd to publish release:"
        println "git push origin master"
        println "git push origin v${version}.RELEASE"

    }
}


class VersionChangeTask extends DefaultTask {

    /**
     * version = "xxx"
     * or version "xxx"
     * or version = 'xxx'
     */
    Pattern versionLinePattern = ~/ *version *=? *["|'].+["|']/

    Action<String> doWithVersionLineAction

    VersionChangeTask() {
        group = "build"
        description = "change the version this project"
    }

    @TaskAction
    def versionChange() {
        allprojects.each {
            // find build.gradle
            // copy to buildDir with doWithVersionLineAction
            // copy back
        }
    }
}

task(release, type: ReleaseTask) {
    releaseBranch = "master"
}